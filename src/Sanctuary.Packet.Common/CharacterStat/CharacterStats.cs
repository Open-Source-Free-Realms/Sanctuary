namespace Sanctuary.Packet.Common;

public static class CharacterStats
{
    public static CharacterStat MaxHealth = new(CharacterStatId.MaxHealth, 0);
    public static CharacterStat MaxMovementSpeed = new(CharacterStatId.MaxMovementSpeed, 0f);
    public static CharacterStat WeaponRange = new(CharacterStatId.WeaponRange, 0f);
    public static CharacterStat HitPointRegen = new(CharacterStatId.HitPointRegen, 0);
    public static CharacterStat MaxMana = new(CharacterStatId.MaxMana, 0);
    public static CharacterStat ManaRegen = new(CharacterStatId.ManaRegen, 0);
    public static CharacterStat Defense = new(CharacterStatId.Defense, 0);
    public static CharacterStat MeleeAvoidance = new(CharacterStatId.MeleeAvoidance, 0);
    public static CharacterStat MeleeCriticalHitChance = new(CharacterStatId.MeleeCriticalHitChance, 0);
    public static CharacterStat MeleeCriticalHitMultiplier = new(CharacterStatId.MeleeCriticalHitMultiplier, 0f);
    public static CharacterStat MeleeChanceToHit = new(CharacterStatId.MeleeChanceToHit, 0);
    public static CharacterStat MeleeWeaponDamageMultiplier = new(CharacterStatId.MeleeWeaponDamageMultiplier, 0f);
    public static CharacterStat MeleeHandToHandDamage = new(CharacterStatId.MeleeHandToHandDamage, 0);
    public static CharacterStat EquippedMeleeWeaponDamage = new(CharacterStatId.EquippedMeleeWeaponDamage, 0);
    public static CharacterStat MeleeAttackIntervalMs = new(CharacterStatId.MeleeAttackIntervalMs, 0);
    public static CharacterStat DamageReductionAmount = new(CharacterStatId.DamageReductionAmount, 0);
    public static CharacterStat ExperienceBoostPercent = new(CharacterStatId.ExperienceBoostPercent, 0f);
    public static CharacterStat DamageReductionPercent = new(CharacterStatId.DamageReductionPercent, 0);
    public static CharacterStat DamageAddition = new(CharacterStatId.DamageAddition, 0);
    public static CharacterStat DamageMultiplier = new(CharacterStatId.DamageMultiplier, 0f);
    public static CharacterStat HealingAddition = new(CharacterStatId.HealingAddition, 0);
    public static CharacterStat HealingMultiplier = new(CharacterStatId.HealingMultiplier, 0f);
    public static CharacterStat M3CollectableSpawnRate = new(CharacterStatId.M3CollectableSpawnRate, 0);
    public static CharacterStat M3SpecialSpawnRate = new(CharacterStatId.M3SpecialSpawnRate, 0f);
    public static CharacterStat M3DetrementalSpawnRate = new(CharacterStatId.M3DetrementalSpawnRate, 0f);
    public static CharacterStat M3Magnitude = new(CharacterStatId.M3Magnitude, 0);
    public static CharacterStat M3Timer = new(CharacterStatId.M3Timer, 0f);
    public static CharacterStat MimicRadius = new(CharacterStatId.MimicRadius, 0f);
    public static CharacterStat MimicCuttingMagnitude = new(CharacterStatId.MimicCuttingMagnitude, 0);
    public static CharacterStat MimicPowerMagnitude = new(CharacterStatId.MimicPowerMagnitude, 0);
    public static CharacterStat MimicGreenRange = new(CharacterStatId.MimicGreenRange, 0f);
    public static CharacterStat MimicSpeed = new(CharacterStatId.MimicSpeed, 0f);
    public static CharacterStat AbilityCriticalHitChance = new(CharacterStatId.AbilityCriticalHitChance, 0);
    public static CharacterStat AbilityCriticalHitMultiplier = new(CharacterStatId.AbilityCriticalHitMultiplier, 0f);
    public static CharacterStat Luck = new(CharacterStatId.Luck, 0);
    public static CharacterStat HeadInflationPercent = new(CharacterStatId.HeadInflationPercent, 0);
    public static CharacterStat GoldBoostPercent = new(CharacterStatId.GoldBoostPercent, 0);
    public static CharacterStat M3PerMatchProc = new(CharacterStatId.M3PerMatchProc, 0);
    public static CharacterStat SoccerKickPower = new(CharacterStatId.SoccerKickPower, 0);
    public static CharacterStat SoccerFootwork = new(CharacterStatId.SoccerFootwork, 0);
    public static CharacterStat SoccerSpeed = new(CharacterStatId.SoccerSpeed, 0);
    public static CharacterStat SoccerToughness = new(CharacterStatId.SoccerToughness, 0);
    public static CharacterStat SoccerTacklePower = new(CharacterStatId.SoccerTacklePower, 0);
    public static CharacterStat FishingCastingSkill = new(CharacterStatId.FishingCastingSkill, 0);
    public static CharacterStat FishingCastingStrength = new(CharacterStatId.FishingCastingStrength, 0);
    public static CharacterStat FishingLineStrength = new(CharacterStatId.FishingLineStrength, 0);
    public static CharacterStat FishingReelingSpeed = new(CharacterStatId.FishingReelingSpeed, 0);
    public static CharacterStat FishingLuck = new(CharacterStatId.FishingLuck, 0);
    public static CharacterStat FishingPerfectCastSkill = new(CharacterStatId.FishingPerfectCastSkill, 0);
    public static CharacterStat Toughness = new(CharacterStatId.Toughness, 0);
    public static CharacterStat AbilityCritVulnerability = new(CharacterStatId.AbilityCritVulnerability, 0);
    public static CharacterStat MeleeCritVulnerability = new(CharacterStatId.MeleeCritVulnerability, 0);
    public static CharacterStat RangeMultiplier = new(CharacterStatId.RangeMultiplier, 0f);
    public static CharacterStat MaxShields = new(CharacterStatId.MaxShields, 0);
    public static CharacterStat ShieldsRegen = new(CharacterStatId.ShieldsRegen, 0);
    public static CharacterStat FactoryProductionModifier = new(CharacterStatId.FactoryProductionModifier, 0f);
    public static CharacterStat FactoryYieldModifier = new(CharacterStatId.FactoryYieldModifier, 0f);
    public static CharacterStat PlayerCastIllusionImmunity = new(CharacterStatId.PlayerCastIllusionImmunity, 0);
    public static CharacterStat GlideDefaultForwardSpeed = new(CharacterStatId.GlideDefaultForwardSpeed, 0f);
    public static CharacterStat GlideMinForwardSpeed = new(CharacterStatId.GlideMinForwardSpeed, 0f);
    public static CharacterStat GlideMaxForwardSpeed = new(CharacterStatId.GlideMaxForwardSpeed, 0f);
    public static CharacterStat GlideFallTime = new(CharacterStatId.GlideFallTime, 0f);
    public static CharacterStat GlideFallSpeed = new(CharacterStatId.GlideFallSpeed, 0f);
    public static CharacterStat GlideEnabled = new(CharacterStatId.GlideEnabled, 0);
    public static CharacterStat InCombatHitPointRegen = new(CharacterStatId.InCombatHitPointRegen, 0);
    public static CharacterStat InCombatManaRegen = new(CharacterStatId.InCombatManaRegen, 0);
    public static CharacterStat GlideAccel = new(CharacterStatId.GlideAccel, 0f);
    public static CharacterStat JumpHeight = new(CharacterStatId.JumpHeight, 0f);
}